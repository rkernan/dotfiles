#!/usr/bin/env bash

set -e

BIN=$(which paru 2>/dev/null || which pacman)
SU_BIN=$(which paru 2>/dev/null || echo "sudo $(which pacman)")

no_params_or_die() {
  if [ $# -ne 0 ]; then
    (>&2 echo "Command '$CMD' does not accept additional parameters.")
    exit 1
  fi
}

usage() {
  echo "Pacman helper tool ('$BIN', '$SU_BIN')"
  echo "If using 'paru' AUR helper, run the following first: paru --gendb && paru --devel --save"
  echo "Usage: $0 [command] [options]"
  echo "  clean               : Clean the pacman cache"
  echo "  deptree             : List dependency tree of a given package"
  echo "  diff                : Clean up pacnew files"
  echo "  downgrade           : Downgrade a package"
  echo "  download            : Download a remote package"
  echo "  hardcode-tray       : Apply icons using the hardcode-tray utility"
  echo "  info                : Show info for a package or packages"
  echo "  install             : Install a remote package"
  echo "  list-deps           : List all packages intalled as dependencies"
  echo "  list-explicit       : List all explicitly install packages"
  echo "  list-orphans        : List all installed orphan packages"
  echo "  lostfiles           : List all orphaned files not owned by a package"
  echo "  provides            : Query which remote package provides a specified file"
  echo "  provides-what       : List all files provided by the given package or all packages if none are specified"
  echo "  remove              : Uninstall a local package"
  echo "  search              : Search for the specified remote package or list all remote packages if none are specified"
  echo "  search-local        : Search for the specified local package or list all local packages if none are specified"
  echo "  sync                : Sync the package file database"
  echo "  upgrade             : Update the specified packages or all packages if none are specified"
  echo "  upgrade-firmware    : Update the system firmware"
  echo "  upgrade-keyring     : Update the pacman keyring"
  echo "  verify              : Validate the specified packages or all packages if none are specified"
}

if (( EUID == 0 )); then
  (>&2 echo "Script cannot be run as root")
  exit 1
fi

CMD=$1
shift

case $CMD in
  clean)
    no_params_or_die $*
    exec $(which paccache) -r
    ;;
  deptree)
    exec $(which pactree) $*
    ;;
  diff)
    no_params_or_die $*
    exec sudo $(which pacdiff)
    ;;
  downgrade)
    exec sudo $(which downgrade) $*
    ;;
  download)
    exec $SU_BIN -Sw $*
    ;;
  hardcode-tray)
    exec sudo -E hardcode-tray --apply
    ;;
  info)
    exec $SU_BIN -Si $*
    ;;
  install)
    exec $SU_BIN -S $*
    ;;
  list-deps)
    no_params_or_die $*
    exec $SU_BIN -Qd
    ;;
  list-explicit)
    no_params_or_die $*
    exec $SU_BIN -Qe
    ;;
  list-orphans)
    no_params_or_die $*
    exec $BIN -Qdt
    ;;
  lostfiles)
    no_params_or_die $*
    exec sudo $(which lostfiles)
    ;;
  provides)
    exec $BIN -F $*
    ;;
  provides-what)
    exec $BIN -Ql $*
    ;;
  remove)
    exec $SU_BIN -Rns $*
    ;;
  search)
    exec $BIN -Ss $*
    ;;
  search-local)
    exec $BIN -Qs $*
    ;;
  sync)
    no_params_or_die $*
    exec $SU_BIN -Fy
    ;;
  upgrade)
    exec $SU_BIN -Syyu $*
    ;;
  upgrade-firmware)
    no_params_or_die $*
    $(which fwupdmgr) refresh --force
    $(which fwupdmgr) get-updates
    $(which fwupdmgr) update
    ;;
  upgrade-keyring)
    no_params_or_die $*
    exec $SU_BIN -Sy archlinux-keyring
    ;;
  verify)
    exec $BIN -Qkk $*
    ;;
  -h|--help)
    usage
    ;;
  *)
    (>&2 echo "Unrecognized command '$CMD'")
    (>&2 usage)
    exit 1
    ;;
esac
