#!/usr/bin/env python3

import os
from argparse import ArgumentParser, BooleanOptionalAction

PACMAN: str = "pacman"
PARU: str = "paru"
AUR_HELPER: str | None = None


def do(cmd: str, *args: str) -> None:
    os.execvp(cmd, [cmd, *args])


def do_sudo(cmd: str, *args: str) -> None:
    os.execvp("sudo", ["sudo", cmd, *(args or [])])


def pacman(*args: str, sudo: bool = True) -> None:
    if AUR_HELPER and AUR_HELPER != PACMAN:
        do(AUR_HELPER, *args)
    elif not sudo:
        do(PACMAN, *args)
    else:
        do_sudo(PACMAN, *args)


def get_parser() -> ArgumentParser:
    parser = ArgumentParser(prog="pack", description="Pacman helper tool")
    parser.add_argument("--aur", dest="enable_aur", action=BooleanOptionalAction, help="enable aur")
    parser.set_defaults(enable_aur=False)
    subparsers = parser.add_subparsers(dest="command", required=True)
    subparsers.add_parser("clean", help="clean pacman cache")
    deptree = subparsers.add_parser("deptree", help="list package(s) dependency tree")
    deptree.add_argument("packages", nargs="+")
    subparsers.add_parser("diff", help="clean up pacnew files")
    info = subparsers.add_parser("info", help="show info for package(s)")
    info.add_argument("packages", nargs="+")
    install = subparsers.add_parser("install", help="install package(s)")
    install_group = install.add_mutually_exclusive_group()
    install_group.add_argument("--asdeps", action="store_true")
    install_group.add_argument("--asexplicit", action="store_true")
    install_group.set_defaults(asdeps=False, asexplicit=False)
    install.add_argument("packages", nargs="+")
    subparsers.add_parser("list-deps", help="list all packages intalled as dependencies")
    subparsers.add_parser("list-explicit", help="list all explicitly installed packages")
    subparsers.add_parser("list-orphans", help="list all orphan packages")
    provides = subparsers.add_parser("provides", help="query which package(s) provides file(s)")
    provides.add_argument("files", nargs="+")
    provides_what = subparsers.add_parser("provides-what", help="list all files provided by package(s)")
    provides_what.add_argument("packages", nargs="+")
    remove = subparsers.add_parser("remove", help="uninstall package(s)")
    remove.add_argument("packages", nargs="+")
    search = subparsers.add_parser("search", help="search for package(s) or list all")
    search.add_argument("packages", nargs="*")
    search_local = subparsers.add_parser("search-local", help="search for local package(s) or list all")
    search_local.add_argument("packages", nargs="*")
    set_deps = subparsers.add_parser("set-deps", help="set local package(s) as dependencies")
    set_deps.add_argument("packages", nargs="+")
    set_explicit = subparsers.add_parser("set-explicit", help="set local package(s) as explicitly installed")
    set_explicit.add_argument("packages", nargs="+")
    subparsers.add_parser("sync", help="sync package databases")
    upgrade = subparsers.add_parser("upgrade", help="update package(s) or all")
    upgrade.add_argument("packages", nargs="*")
    subparsers.add_parser("upgrade-firmware", help="update system firmware")
    subparsers.add_parser("upgrade-keyring", help="update pacman keyring")
    verify = subparsers.add_parser("verify", help="validate package(s) or all")
    verify.add_argument("packages", nargs="*")
    return parser


if __name__ == "__main__":
    args = get_parser().parse_args()

    if args.enable_aur:
        AUR_HELPER = PARU

    if args.command == "clean":
        do("paccache", "-r")
    elif args.command == "deptree":
        do("pactree", *args.packages)
    elif args.command == "diff":
        do_sudo("pacdiff")
    elif args.command == "info":
        pacman("-Si", *args.packages, sudo=False)
    elif args.command == "install":
        addi_args = []
        if args.asdeps:
            addi_args.append("--asdeps")
        elif args.asexplicit:
            addi_args.append("--asexplicit")
        pacman("-S", "--needed", *addi_args, *args.packages)
    elif args.command == "list-deps":
        pacman("-Qd")
    elif args.command == "list-explicit":
        pacman("-Qe")
    elif args.command == "list-orphans":
        pacman("-Qdt", sudo=False)
    elif args.command == "provides":
        pacman("-F", *args.files, sudo=False)
    elif args.command == "provides-what":
        pacman("-Ql", *args.packages, sudo=False)
    elif args.command == "remove":
        pacman("-Rns", *args.packages)
    elif args.command == "search":
        pacman("-Ss", *args.packages, sudo=False)
    elif args.command == "search-local":
        pacman("-Qs", *args.packages)
    elif args.command == "set-deps":
        pacman("-D", "--asdeps", *args.packages)
    elif args.command == "set-explicit":
        pacman("-D", "--asexplicit", *args.packages)
    elif args.command == "sync":
        pacman("-Fy")
    elif args.command == "upgrade":
        pacman("-Syyu", *args.packages)
    elif args.command == "upgrade-firmware":
        do("bash", "-c", " && ".join(["fwupdmgr refresh --force", "fwupdmgr get-updates", "fwupdmgr update"]))
    elif args.command == "upgrade-keyring":
        pacman("-Sy", "archlinux-keyring")
    elif args.command == "verify":
        pacman("-Qkk", *args.packages)
