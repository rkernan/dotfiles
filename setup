#!/usr/bin/env python3

import os
import shutil
import subprocess
from argparse import ArgumentParser
from contextlib import contextmanager
from enum import Enum
from pathlib import Path
from typing import Any, Generator


class TerminalCode(Enum):
    RESET = "\033[0m"
    BOLD = "\033[1m"
    UNDERLIZE = "\033[4m"
    RED = "\033[91m"
    GREEN = "\033[92m"
    YELLOW = "\033[93m"


def termcode(s: str, color: TerminalCode, *args: TerminalCode) -> str:
    if args:
        s = termcode(s, *args)
    return f"{color.value}{s}{TerminalCode.RESET.value}"


def check_call(cmd: str, **kwargs: Any) -> None:
    print(">", termcode(cmd, TerminalCode.BOLD))
    kwargs["shell"] = True
    kwargs["stderr"] = subprocess.STDOUT
    try:
        res = subprocess.check_output(cmd, **kwargs)
        if res:
            print(res.decode("utf-8").strip())
    except subprocess.CalledProcessError as err:
        print(err.output.decode("utf-8").strip())
        raise


def stow(path: Path) -> None:
    check_call(f"stow -t {Path.home()} -vS {path!s}")


def unstow(path: Path) -> None:
    check_call(f"stow -t {Path.home()} -vD {path!s}")


def print_command(cmd: str) -> None:
    which = shutil.which(cmd)
    status = termcode("OK", TerminalCode.GREEN)
    if which is None:
        status = termcode("FAIL", TerminalCode.RED)
    print(status, cmd, "->", shutil.which(cmd))


@contextmanager
def pushd(path: Path) -> Generator[Path, None, None]:
    previous_path = Path(os.getcwd())
    os.chdir(path)
    try:
        yield path
    finally:
        os.chdir(previous_path)


class InstallTarget(Enum):
    CHECKHEALTH = "checkhealth"
    CLI = "cli"
    GUI = "gui"
    WSL = "wsl"
    WSL_WORK = "wsl-work"
    UNINSTALL = "uninstall"
    INSTALL_HOMEBREW = "install-homebrew"
    INSTALL_GROOVYLS = "install-groovyls"

    def __str__(self) -> str:
        return self.value


def guess_target() -> list[InstallTarget]:
    always = [InstallTarget.CHECKHEALTH]
    if shutil.which("wsl.exe"):
        if Path(Path.home(), ".work").exists():
            return [InstallTarget.CLI, InstallTarget.WSL, InstallTarget.WSL_WORK, *always]
        return [InstallTarget.CLI, InstallTarget.WSL, *always]
    elif shutil.which("pacman"):
        return [InstallTarget.CLI, InstallTarget.GUI, *always]
    return [InstallTarget.CLI, *always]


if __name__ == "__main__":
    parser = ArgumentParser()
    parser.add_argument("targets", type=InstallTarget, nargs="*", choices=list(InstallTarget))
    args = parser.parse_args()
    targets = args.targets
    if not targets:
        targets = guess_target()
    # always create these directories
    Path(Path.home(), ".config").mkdir(parents=True, exist_ok=True)
    Path(Path.home(), ".local", "bin").mkdir(parents=True, exist_ok=True)
    Path(Path.home(), ".virtualenvs").mkdir(parents=True, exist_ok=True)
    # install targets
    with pushd(Path(__file__).parent):
        for target in targets:
            print(termcode(target.value, TerminalCode.BOLD, TerminalCode.UNDERLIZE))
            if target in (InstallTarget.CLI, InstallTarget.GUI, InstallTarget.WSL, InstallTarget.WSL_WORK):
                stow(Path(".", target.value))

            if target is InstallTarget.CHECKHEALTH:
                print_command("asdf")
                print_command("bash-language-server")
                print_command("bat")
                print_command("brew")
                print_command("carapace")
                print_command("cargo")
                print_command("clangd")
                print_command("fd")
                print_command("fish")
                print_command("fzf")
                print_command("git-lfs")
                print_command("go")
                print_command("groovy-language-server")
                print_command("lua-language-server")
                print_command("nvim")
                print_command("rg")
                print_command("rustup")
                print_command("stow")
                print_command("tmux")
                print_command("vf")
                print_command("vscode-json-language-server")
                print_command("yaml-language-server")
            elif target is InstallTarget.CLI:
                if shutil.which("asdf"):
                    check_call("asdf plugin add python")
                    check_call("asdf plugin update --all")
                if shutil.which("vf"):
                    check_call("vf install auto_activation global_requirements environment")
            elif target is InstallTarget.WSL and shutil.which("fish"):
                check_call("fish -c 'set -Ux AUTOSTART_TMUX 1'")
            elif target is InstallTarget.INSTALL_HOMEBREW:
                if shutil.which("brew") is None:
                    check_call("curl -sL https://raw.githubusercontent.com/Homebrew/install/master/install.sh | bash -s")
                check_call("brew update")
                check_call("brew bundle --upgrade")
                brew_prefix = subprocess.check_output("brew --prefix", shell=True).decode("utf-8").strip()
                check_call(f"{brew_prefix}/opt/fzf/install --key-bindings --completion --no-update-rc --xdg")
            elif target is InstallTarget.INSTALL_GROOVYLS:
                git_path = Path(Path.home(), ".local", "lib", "groovy-language-server")
                git_path.parent.mkdir(parents=True, exist_ok=True)
                if not git_path.exists():
                    check_call(f"git clone https://github.com/GroovyLanguageServer/groovy-language-server.git {git_path}")
                with pushd(git_path):
                    check_call("git pull")
                    check_call("./gradlew build")
            elif target is InstallTarget.UNINSTALL:
                for path in ("cli", "gui", "wsl", "wsl-work"):
                    unstow(Path(".", path))
