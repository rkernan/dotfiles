#!/usr/bin/env python3

import os
import shutil
import subprocess
import sys
from argparse import ArgumentParser
from contextlib import contextmanager
from enum import Enum
from pathlib import Path
from typing import Any, Generator


class TerminalCode(Enum):
    RESET = "\033[0m"
    BOLD = "\033[1m"
    RED = "\033[91m"
    GREEN = "\033[92m"


def termcode(s: str, color: TerminalCode, *args: TerminalCode) -> str:
    if args:
        s = termcode(s, *args)
    return f"{color.value}{s}{TerminalCode.RESET.value}"


def check_call(cmd: str, **kwargs: Any) -> None:
    print(">", termcode(cmd, TerminalCode.BOLD))
    kwargs["shell"] = True
    kwargs["stderr"] = subprocess.STDOUT
    try:
        res = subprocess.check_output(cmd, **kwargs)
        if res:
            print(res.decode("utf-8").strip())
    except subprocess.CalledProcessError as err:
        print(err.output.decode("utf-8").strip())
        raise


def stow(install: list[Path]) -> None:
    targets = " ".join([str(p) for p in install])
    check_call(f"stow -t {Path.home()} -vS {targets!s}")


@contextmanager
def pushd(path: Path) -> Generator[Path, None, None]:
    previous_path = Path(os.getcwd())
    os.chdir(path)
    try:
        yield path
    finally:
        os.chdir(previous_path)


class InstallTarget(Enum):
    BREW = "brew"
    CHECKHEALTH = "checkhealth"
    CLI = "cli"
    GUI = "gui"
    WORK = "work"
    WSL = "wsl"

    def __str__(self) -> str:
        return self.value


def guess_target() -> list[InstallTarget]:
    targets = [InstallTarget.CHECKHEALTH, InstallTarget.CLI]
    if not shutil.which("pacman"):
        targets = [*targets, InstallTarget.BREW]
    if os.environ.get("XDG_CURRENT_DESKTOP", None) is not None:
        targets = [*targets, InstallTarget.GUI]
    if Path(Path.home(), ".work").exists():
        targets = [*targets, InstallTarget.WORK]
    if shutil.which("wsl.exe"):
        targets = [*targets, InstallTarget.WSL]
    return targets


if __name__ == "__main__":
    parser = ArgumentParser()
    parser.add_argument("targets", type=InstallTarget, nargs="*", choices=list(InstallTarget))
    args = parser.parse_args()
    targets = args.targets
    if not targets:
        targets = guess_target()

    with pushd(Path(__file__).parent):
        checkhealth_bins = [
            "bash-language-server",
            "bat",
            "cargo",
            "clangd",
            "fd",
            "fish",
            "fzf",
            "git-lfs",
            "go",
            "lua-language-server",
            "nvim",
            "pipx",
            "pyenv",
            "rg",
            "rustup",
            "stow",
            "vf",
            "vscode-json-language-server",
            "yaml-language-server",
        ]

        Path(Path.home(), ".config").mkdir(parents=True, exist_ok=True)
        Path(Path.home(), ".local", "bin").mkdir(parents=True, exist_ok=True)
        Path(Path.home(), ".virtualenvs").mkdir(parents=True, exist_ok=True)
        for path, filetype in ((Path("cli", ".ssh", "config.secure"), "sshconfig"),
                               (Path("cli", ".config", "git", "secure"), "gitconfig")):
            if not path.exists():
                with open(path, "w") as fd:
                    fd.write(f"# vi: ft={filetype}\n")

        if InstallTarget.BREW in targets:
            print(termcode(f"==> {InstallTarget.BREW.value}", TerminalCode.BOLD))
            if shutil.which("brew") is None:
                check_call("curl -sL https://raw.githubusercontent.com/Homebrew/install/master/install.sh | bash -s")
                sys.exit(0)
            check_call("brew update")
            check_call("brew bundle --upgrade")
            if shutil.which("rustup") is None:
                check_call("curl --proto '=https' --tlsv1.2 -sSf https://sh.rustup.rs | sh")

        stow_targets = []
        stow_target_names = []
        for target in targets:
            target_path = Path(".", target.value)
            if target_path.exists():
                stow_targets = [*stow_targets, target_path]
                stow_target_names = [*stow_target_names, target.value]
        print(termcode(f"==> stow: {stow_target_names}", TerminalCode.BOLD))
        stow(stow_targets)

        if InstallTarget.BREW in targets:
            print(termcode(f"==> {InstallTarget.BREW.value}", TerminalCode.BOLD))
            checkhealth_bins = [*checkhealth_bins, "brew", "tmux"]
            brew_prefix = subprocess.check_output("brew --prefix", shell=True).decode("utf-8").strip()
            fzf_install = Path(brew_prefix, "opt", "fzf", "install")
            check_call(f"{fzf_install} --all --xdg")

        if InstallTarget.CLI in targets:
            print(termcode(f"==> {InstallTarget.CLI.value}", TerminalCode.BOLD))
            if shutil.which("pyenv"):
                check_call("pyenv init - fish | fish")
            if shutil.which("vf") is None:
                check_call("pipx install virtualfish")
            check_call("vf install auto_activation environment global_requirements")

        if InstallTarget.GUI in targets:
            Path(Path.home(), ".config", "environment.d").mkdir(parents=True, exist_ok=True)
            print(termcode(f"==> {InstallTarget.GUI.value}", TerminalCode.BOLD))
            checkhealth_bins = [*checkhealth_bins, "btop"]

        if InstallTarget.WORK in targets:
            print(termcode(f"==> {InstallTarget.WORK.value}", TerminalCode.BOLD))
            Path(Path.home(), ".work").touch()
            checkhealth_bins = [*checkhealth_bins, "groovy-language-server"]

        if InstallTarget.WSL in targets:
            print(termcode(f"==> {InstallTarget.WSL.value}", TerminalCode.BOLD))
            if shutil.which("fish"):
                check_call("fish -c 'set -U AUTOSTART_TMUX 1'")
                check_call("fish -c 'set -Ux GALLIUM_DRIVER d3d12'")
                check_call("fish -c 'set -Ux LIBVA_DRIVER_NAME d3d12'")
            userprofile = os.environ.get("USERPROFILE", None)
            if userprofile is not None:
                wezterm_config = Path(userprofile, ".config", "wezterm")
                shutil.rmtree(wezterm_config, ignore_errors=True)
                shutil.copytree(Path("gui", ".config", "wezterm"), wezterm_config, dirs_exist_ok=True)

        if InstallTarget.CHECKHEALTH in targets:
            print(termcode(f"==> {InstallTarget.CHECKHEALTH.value}", TerminalCode.BOLD))
            for bin in sorted(set(checkhealth_bins)):
                which = shutil.which(bin)
                if which:
                    print(termcode("OK", TerminalCode.GREEN), bin, "->", which)
                else:
                    print(termcode("MISSING", TerminalCode.RED), bin)
